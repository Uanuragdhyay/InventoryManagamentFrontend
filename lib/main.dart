import 'package:flutter/material.dart';
import 'services/product_service.dart';
import 'models/product.dart';
import 'widgets/product_card.dart';
import 'screens/ProductListScreen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Inventory Management',
      theme: ThemeData(
        primarySwatch: Colors.purple,
      ),
      home: ProductListScreen(),
    );
  }
}

class ProductListScreen extends StatefulWidget {
  @override
  _ProductListScreenState createState() => _ProductListScreenState();
}

class _ProductListScreenState extends State<ProductListScreen> {
  final ProductService _productService = ProductService();
  late Future<List<Product>> _products;

  @override
  void initState() {
    super.initState();
    _products = _productService.fetchProducts();
  }

  Future<void> _refreshProducts() async {
    setState(() {
      _products = _productService.fetchProducts();
    });
  }

  Future<void> _deleteProduct(int id) async {
    try {
      await _productService.deleteProduct(id);
      _refreshProducts();
    } catch (e) {
      print('Error deleting product: $e');
    }
  }

  Future<void> _addProduct(Product product) async {
    try {
      final newProduct = await _productService.createProduct(product);
      setState(() {
        _products.then((value) {
          value.add(newProduct);
          return value;
        });
      });
    } catch (e) {
      print('Error adding product: $e');
    }
  }

  void _showAddProductDialog() {
    String name = '';
    String category = '';
    int quantity = 0;
    double price = 0.0;

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Add Product', style: TextStyle(color: Colors.white)),
          backgroundColor: Colors.black,
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                decoration: InputDecoration(labelText: 'Name', labelStyle: TextStyle(color: Colors.white)),
                onChanged: (value) {
                  name = value;
                },
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Category', labelStyle: TextStyle(color: Colors.white)),
                onChanged: (value) {
                  category = value;
                },
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Quantity', labelStyle: TextStyle(color: Colors.white)),
                keyboardType: TextInputType.number,
                onChanged: (value) {
                  quantity = int.tryParse(value) ?? 0;
                },
              ),
              TextField(
                decoration: InputDecoration(labelText: 'Price', labelStyle: TextStyle(color: Colors.white)),
                keyboardType: TextInputType.numberWithOptions(decimal: true),
                onChanged: (value) {
                  price = double.tryParse(value) ?? 0.0;
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (name.isNotEmpty && category.isNotEmpty && quantity > 0 && price > 0) {
                  _addProduct(Product(
                    id: null, // ID is generated by the backend
                    name: name,
                    category: category,
                    quantity: quantity,
                    price: price,
                  ));
                  Navigator.of(context).pop(); // Close the dialog
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Please fill all fields correctly.')),
                  );
                }
              },
              child: Text('Add', style: TextStyle(color: Colors.green)),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Close the dialog
              },
              child: Text('Cancel', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Products', style: TextStyle(color: Colors.red)),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh, color: Colors.red),
            onPressed: _refreshProducts,
          ),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.purple[900]!, Colors.blueGrey], // Gradient from purple to black
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: FutureBuilder<List<Product>>(
          future: _products,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.waiting) {
              return Center(child: CircularProgressIndicator());
            } else if (snapshot.hasError) {
              return Center(child: Text('Error: ${snapshot.error}', style: TextStyle(color: Colors.white)));
            } else {
              List<Product> products = snapshot.data!;
              return ListView.builder(
                itemCount: products.length,
                itemBuilder: (context, index) {
                  return ProductCard(
                    product: products[index],
                    onDelete: () => _deleteProduct(products[index].id!),
                  );
                },
              );
            }
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _showAddProductDialog,
        backgroundColor: Colors.green,
        child: Icon(Icons.add),
      ),
    );
  }
}
